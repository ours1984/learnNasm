[SECTION .text]
[BITS 32]
extern kernel_main

global _start
_start:
    call kernel_main
_io_hlt:
    hlt
    jmp _io_hlt


global in_byte
in_byte:
    push ebp;
    mov ebp, esp

    xor eax, eax

    mov edx, [ebp + 8]      ; port
    in al, dx

    leave
    ret

global out_byte
out_byte:
    push ebp;
    mov ebp, esp

    mov edx, [ebp + 8]      ; port
    mov eax, [ebp + 12]     ; value
    out dx, al

    leave
    ret

global in_word
in_word:
    push ebp;
    mov ebp, esp

    xor eax, eax

    mov edx, [ebp + 8]      ; port
    in ax, dx

    leave
    ret

global out_word
out_word:
    push ebp;
    mov ebp, esp

    mov edx, [ebp + 8]      ; port
    mov eax, [ebp + 12]     ; value
    out dx, ax

    leave
    ret

GLOBAL io_in8, io_in16, io_in32
GLOBAL io_out8, io_out16, io_out32
GLOBAL io_load_eflags, io_store_eflags

io_in8: ; int io_in8(int port);
 MOV EDX,[ESP+4] ; port
 MOV EAX,0
 IN AL,DX
 RET
io_in16: ; int io_in16(int port);
 MOV EDX,[ESP+4] ; port
 MOV EAX,0
 IN AX,DX
 RET
io_in32: ; int io_in32(int port);
 MOV EDX,[ESP+4] ; port
 IN EAX,DX
 RET
io_out8: ; void io_out8(int port, int data);
 MOV EDX,[ESP+4] ; port
 MOV AL,[ESP+8] ; data
 OUT DX,AL
 RET
io_out16: ; void io_out16(int port, int data);
 MOV EDX,[ESP+4] ; port
 MOV EAX,[ESP+8] ; data
 OUT DX,AX
 RET
io_out32: ; void io_out32(int port, int data);
 MOV EDX,[ESP+4] ; port
 MOV EAX,[ESP+8] ; data
 OUT DX,EAX
 RET
io_load_eflags: ; int io_load_eflags(void);
 PUSHFD ; 指 PUSH EFLAGS 
 POP EAX
 RET
io_store_eflags: ; void io_store_eflags(int eflags);
 MOV EAX,[ESP+4]
 PUSH EAX
 POPFD ; 指 POP EFLAGS
 RET